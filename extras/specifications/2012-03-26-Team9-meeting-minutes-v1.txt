

2012-03-26-Team9-meeting-minutes-v1.txt

Version: 2012-03-29, with typo fix update 2012-04-22 
Meeting date: 2012-03-26 (Monday)
Meeting time: 12:00...13:30
Meeting place: Aalto Venture Garage
Participants: Mikael Koponen, Samuli Suortti, Kai Sjöblom (secr.)

Agenda:

1) Status of ongoing action points.
2) Discussion about how to go deeper in function and feature planning
   and subtask planning.
3) Planning of the first (small) feature set needed for an initial
   running app.
4) Bullet point listing of app development targets on time axle,
   noting that 50% of total development time can go to testing.
5) The desired subtasks to be put on priority list.
6) Volunteers can tell what they would like to do next and
   how much time they would need for those things.
   
Discussion:

About the web service usage permissions action point,
Kai had sent an application in with usage descriptions,
and got verbally a tentative yes but final grant of use
would require more time for bureaucracy since an earlier
similar Helsinki University of Technology contract would
have to be searched and checked first.
[Secretary's note: After the meeting the web service
provider contacted and informed that the earlier agreement
with HUT had been found, but it was a bit different,
so a new contract paper would be needed to be written by them,
they will contact again when it is ready for undersigning.]

About the HTML5 W3C touch event API check there was an
initial group decision that we try WP as 1st target platform
(due to amount of test devices) if touch events can be
successfully implemented in the HTML5 application, otherwise
Android (on a Galaxy Nexus phone) is the primary target phone
platform. A promising blog article was found prior the meeting,
where the blogger cited an Opera spokesman about WP becoming
one of the supported Opera browser platforms, so it looked as
we could use WP as a first target platform.
[Secretary's note: After the meeting it turned out that the
blogger had optimistically misinterpreted an Opera spokesman,
and Opera has not yet announced in public a browser variant
for WP. Currently Opera Mobile 12 supports these target platforms:
Android, Symbian/S60, Windows Mobile (10), Maemo (labs),
MeeGo (labs). In addition, Opera offers browser also for
desktop usage.]

The agenda points were discussed though not exhaustively
(and next meeting will continue several of the above listed
agenda topics).

In the course midpoint check, the team should already have
something working on the screen, such as:
- Basic map drawing functionality.
- Current geolocation initially as the default center point on map.
- Some of the action buttons would be already in place.
- Also at least one kind of (service) marker arrows.
- Possibly also zooming scale and 4 navigation arrows.

A second priority functionality would be to add the
automatic map scrolling when the mobile device is moving
physically (typically in a car).

Further services (in addition to the gas stations) would be the
- hotels,
- cafes and
- car repair shops.

The most important Digitraffic based web services to be
provided by the application would be to show the
- traffic speed status (congested road parts with red color,
  normal speed monitored road with green color),
- road weather by various monitored measurement stations,
- traffic disturbances (due to e.g. significant car crashes), and
- pictures taken by road cameras (showing e.g. if there is snow
  on the road, or long car queues).
  
The team may need to build also a traffic data simulator,
to be able to test the app thoroughly, but it is not
one of the highest priority work subtasks.

About the service marker pins to be supported in the first priority:
- Gas stations was selected as the first point of service type.

It was noted that latitude and longitude coordinates for points
of service are not necessarily required to be necessarily known
(by e.g. asking beforehand from the service providers or visiting
with GPS the place), since the street address vs. geolocation
conversion is achievable via existing API call.

E.g. Google Places may be reused by some part of our application
if we want, so it is not compulsory to write own code for every
feature if a desired application subarea functionality could be
achieved faster  by reusing some existing service. 

Local storage would be good to have in the mobile device,
to allow the application to remember the last used
settings and last used UI mode (map/list/other) when the
application is started.

In the app front end, when the user's finger is hovering
(or pressing) a marker pin, more details would be shown
about the point-of-service: E.g.:
- the service provider company name,
- the street address,
- the phone number,
- the URL to the service provider's web pages.

The backend is to provide the detail data for each
point-of-service near the mobile devices current
location (or last viewed map area) e.g. beforehand,
according to the map area being looked at. This would
allow fast response times and smooth user experience.

The front end of the application could filter that
not too many marker pins are shown (obscuring the
mobile device's display), but prioritizing the
nearest ones.

An other important function for the backend part of the application
would be to aid the front end to have better performance by filtering
the amount of traffic web service data being sent to the front end.
For example, the traffic data about traffic speeds (3300 km
of roads currently being anonymously speed monitored),
road weather in different places, traffic disturbances
etc. real time data could be coming partly with a high
frequence from a web service (even with 1 minute interval),
and the back end could filter only such information to be
sent to the front end which is relatively near to the
current mobile device location. The mobile device on
the other hand keeps the back end aware of the changes
of the mobile device location.

Finally, it was proposed that after the application is
ready we edit a video presentation/tutorial about its usage.
Parts of it may be shown with fast-forward speed, if
wanted to give a first quick impression what the application
can do.

Action points:

- All team members to progress the ongoing earlier planned
application work areas.
- Kai to email more information about web service APIs to be used
in the app.
- Kai to combine status report files to be in one file from now on.
